<apex:page controller="YES_CTRL_ReportIDsAndValues" docType="html-5.0" >
    <apex:pageMessages escape="false"/>
    <apex:form > 
        <apex:pageBlock title="Look Up and Export Records on Non-ID Lookup" rendered="{! csv == '' }">
            <apex:pageBlockSection title="About This Tool">
                <p>
                    This simple tool allows you to look up the IDs and other field values of records based on another unique/semi-unique 
                    field such as an email address or external ID. 
                </p>
                <p>
                    If your query matches multiple records, this tool will always return them on separate rows in your output spreadsheet.
                </p>
                <p>
                    <b>Remember to switch to Salesforce Classic</b> if you have not already. This tool does not currently work in Lightning. 
                </p>
            </apex:pageBlockSection>
            
            
            <apex:actionregion >
                <apex:actionFunction name="CallFieldMethod" action="{!fetchFields}" reRender="fields" status="status" />
                <apex:pageBlockSection title="Select Query Object" columns="1">
                    <p>
                        Your output file will include records of this object.
                    </p>
                    <p>
                        <apex:outputPanel id="objectlist" >
                            <apex:selectList value="{!selectedObject}" size="1"  onchange="CallFieldMethod()" >
                                <apex:selectOptions value="{!listOfObjects}"></apex:selectOptions>
                            </apex:selectList>
                        </apex:outputPanel>                        
                    </p>
                    
                </apex:pageBlockSection>
                <apex:outputPanel id="fields" >
                <apex:pageBlockSection title="Select Query Field" columns="1">
                    <p>
                        You will be matching records based on values in this field.
                    </p>
                    <p>
                        <apex:selectList value="{!selectedField}" size="1" id="FieldList" rendered="{!selectedObject != null}" >
                            <apex:selectOptions value="{!listOfFields}"></apex:selectOptions>
                        </apex:selectList> 
                    </p>                 
                </apex:pageBlockSection>
                <apex:pageBlockSection title="Select Additional Fields to show in Output File" columns="1">
                    <p>
                        This tool will always return the record ID. Additional fields selected here will also be returned in your output file. 
                    </p>
                    <p>
                        <apex:selectList value="{!fieldsInOutput}" size="20" multiselect="true" id="outputFieldList" rendered="{!selectedObject != null}" >
                            <apex:selectOptions value="{!listOfFields}"></apex:selectOptions>
                        </apex:selectList>
                    </p>
                </apex:pageBlockSection>
                </apex:outputPanel>
            </apex:actionregion>
            <apex:pageBlockSection title="How to prepare your query file">
                <p>
                    To use this tool, you need to create a .csv file with your input data.
                </p>
                <ul>
                    <li>The first row should be a header row.</li>
                    <li>
                        The first column should contain your search values. For example, if you are searching for Contacts by their email address, the email address should be in this column.
                    </li>
                    <li>
                        You should deduplicate your data in your spreadsheet editor before loading it in to this application. Duplicate search queries will not return additional results.
                    </li>
                    <li>
                    	You can include as many additional columns as you need. This will be included in the output file. Note: for large jobs, tons of additional fields could cause you to reach page size limits.
                    </li>
                    <li>
                    	<b>If you reach page size limits</b>, consider breaking your file up in to smaller batches of ~500 records or less.
                    </li>
                </ul>
            </apex:pageBlockSection>
            <apex:pageBlockSection title="Upload query csv file" columns="1" >
                <apex:inputFile value="{!csvFileBody}"  filename="{!csvAsString}" title="Upload CSV File" />
            </apex:pageBlockSection>
            <apex:commandButton value="Run Query" action="{!readcsvFile}" status="status" />
            <!-- 
			NOTE: In future version, I hope to support the search query being a different column. As it stands, we can only support the first (ie '0') column
			<apex:pageBlockSection title="Select Column"  columns="1">
                <apex:input value="{!searchTokenIndex}" label="2: Column Index of Query Value" />
                
            </apex:pageBlockSection>
			-->
        </apex:pageBlock>
        <apex:pageBlock id="csv" rendered="{! csv != '' }" title="Output">
            <a href="data:text/plain;charset=utf-8;base64,{! csv }" download="output.csv">Click to Download Results</a>
        </apex:pageBlock>
        
        <apex:actionStatus id="status">
            <apex:facet name="start">
            <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; opacity: 0.25; z-index: 1000; background-color: black;">
                &nbsp;
            </div>
            <div style="position: fixed; left: 0; top: 0; bottom: 0; right: 0; z-index: 1001; margin: 15% 50%">
                <div style="display: inline-block; padding: 2px; background-color: #fff; width: 125px;">
                    <img src="/img/loading.gif" style="float: left; margin: 8px;" />
                    <span style="display: inline-block; padding: 10px 0px;">Please Wait...</span>
                </div>
            </div>
            </apex:facet>
        </apex:actionStatus>
        
    </apex:form>
</apex:page>
