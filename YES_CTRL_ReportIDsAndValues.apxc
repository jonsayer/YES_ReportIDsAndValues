// Created October-November 2018 by Jon Sayer of YES! Media. 
// Offered to the nonprofit Salesforce community as open source software. Please make it better.
// 
// I have blatantly ripped off some code from these fine sources:
// Importing & reading a CSV:           https://sfdcsrini.blogspot.com/2014/09/data-import-from-csv-using-visualforce.html
// Generating list of object fields:    https://developer.salesforce.com/forums/?id=9060G0000005UGKQA2
// Sorting a Select list by value:      https://success.salesforce.com/apex/ideaView?id=08730000000BrX6AAK
// 
// 
//
public class YES_CTRL_ReportIDsAndValues {
    // These handle the input csv
    public Blob csvFileBody                 {get;set;}
    public string csvAsString               {get;set;}
    public String[] csvfilelines            {get;set;}
    public List<String> searchValues        {get;set;}
    
    // In version 1, will default to 0, first column of csv, for search values. In the future I hope to support selecting a different column as the search values.
    public Integer searchTokenIndex         {get;set;}
    
    // These are for debugging and don't really play much a role
    public string soqlQuery                 {get;set;}
    public string csvBeforeConvert          {get;set;}
    
    // These are the Salesforce field values that will be output to the returned csv
    public List<string> fieldList           {get;set;}
    
    // This holds the records that match our search values
    public List<Sobject> opps               {get;set;}
    
    // Our output csv will be encoded here.
    public String csv                       {get;set;}
    
    // User input of what objects and fields are being queries and returned
    public String selectedObject            {get;set;}
    public String selectedField             {get;set;}
    public String[] fieldsInOutput          {get;set;}
    
    // These handle the dynamic display and selection of objects and fields. 
    public List<SelectOption> listOfObjects     {get;set;}
    public List<SelectOption> listOfFields      {get;set;}
    public Map<String, Schema.SobjectType> gd = schema.getGlobalDescribe();
    public Map<String, schema.SObjectField> MapOfFields;
    
    // Controller class initializing key values.
    public YES_CTRL_ReportIDsAndValues(){
        csvfilelines = new String[]{};
        fieldList = New List<string>();
        searchValues = New List<String>();
        csv = '';
        listOfObjects = new List<SelectOption>();
        for(Schema.SObjectType obj : gd.values()){
            Schema.DescribeSObjectResult dr = obj.getDescribe();
            listOfObjects.add(new SelectOption(String.valueOf(dr.getName()), String.valueOf(dr.getLabel())));
        } 
        listOfObjects = sortSelectOptionsByLabel(listOfObjects);
  	}
    
    // Here's the beef! Here's where all the thinking happens. 
    public void readcsvFile(){
        // Clear out the input csv in case it got modified somehow.
        csv='';
        
        // In the future I hope to allow the user to select a column to serve as the search values. Currently, I default to 0. 
        if(searchTokenIndex == null){
            searchTokenIndex = 0;
        }
        
        // Split to csv into rows
        csvAsString 	= csvFileBody.toString();
        // Remove the \r character to ensure we have neat input data. Not doing this breaks single-column input csv's created in some programs (ie. Excel)
        csvAsString		= csvAsString.replaceAll('\\r','') ;
        csvfilelines 	= csvAsString.split('\n');
        
        //get header row
        for(string st:csvfilelines[0].split(',')){
        	fieldList.add(st);
        }
        
        // get our search values
        for(Integer i=1;i<csvFileLines.size();i++){
            string[] csvRecordData = csvfilelines[i].split(',');
            searchValues.add( csvRecordData[searchTokenIndex] );
        }
        
        // If the user has opted to display the query field in the list of output fields, remove it from the list or else we will  have a SOQL error
        for(Integer i = fieldsInOutput.size() - 1; i >= 0; i--){
            if(fieldsInOutput[i] == selectedField){
                fieldsInOutput.remove(i);
            }
        }
        
        // generate the list of fields to return for SOQL query
        String outputFieldsCombined = '';
        if (fieldsInOutput.size() > 0){
            if(fieldsInOutput.size() == 1){
                outputFieldsCombined = ' , ' + fieldsInOutput[0];
            } else {
                outputFieldsCombined = ' , ' + String.join( fieldsInOutput, ' , ' );
            }
        } else {
            outputFieldsCombined = ' ';
        }
        
        //generate soql for debugging. This line isn't really used from here on out
        soqlQuery = 'SELECT	id,'+ selectedField + ' ' + outputFieldsCombined + ' FROM ' + selectedObject + ' WHERE ' + selectedField + ' in :searchValues ORDER BY ' + selectedField;
        
        // actual query
        opps = Database.query( 'SELECT	id,'+ selectedField + ' ' + outputFieldsCombined + ' FROM ' + selectedObject + ' WHERE ' + selectedField + ' in :searchValues ORDER BY ' + selectedField );
		
        //populate first row of our csv with original fields
        for (Integer i=0;i<fieldList.size();i++){
        	csv = csv + fieldList[i].normalizeSpace().escapeCsv() + ',';
        }
        
        //add sf id field
        csv = csv + 'ID'.escapeCsv();
        
        //add columns for our output fields
        for (Integer i=0;i<fieldsInOutput.size();i++){
            csv = csv + ',' + fieldsInOutput[i].escapeCsv();
        }
        csv = csv + '\n';
        
        //output each row by looping through the input rows
        for (Integer i=1;i<csvFileLines.size();i++){
            
            Integer oppIndex = -1;
            List<Integer> oppsToDrop = new List<Integer>();
            Boolean matchFound = false;
            
            String[] csvRecordData = csvfilelines[i].split(',');
            
            //loop through each returned SObject and look for a match
            for(Sobject opp : opps){
                oppIndex++;
                if(String.valueOf( csvRecordData[searchTokenIndex] ) == String.valueOf( opp.get( selectedField ) ) ){
                    // remember the index of this opp row so we can delete it later. We won't be needing it. 
                    oppsToDrop.add(oppIndex);
                    // match found, so we will output a row
                    matchFound = true;
                    //output columns from original file, removing line breaks
                    csv = csv + csvfilelines[i].replaceAll('\\n','').replaceAll('\\r','') + ',';
                    //output Salesforce record id
                    csv = csv + String.valueOf(opp.Id).escapeCsv();
                    // if we have additional output fields, add them too
                    if (fieldsInOutput.size() > 0){
                        for(Integer k = 0; k < fieldsInOutput.size(); k++){
                            // if the field is blank, skip it or we will get errors
                            try{
                                if(opp.get( fieldsInOutput[k] ) != null && opp.get( fieldsInOutput[k] ) != '' ){
                                    csv = csv + ',' + String.valueOf( opp.get( fieldsInOutput[k] ) ).escapeCsv();
                                } else {
                                    csv = csv + ',';
                                }
                            } catch (Exception e) {
                                csv = csv + ',';
            					ApexPages.addMessage( new ApexPages.Message(ApexPages.Severity.ERROR,'Invalid field: '+selectedObject+'.'+fieldsInOutput[k] +' || ' + e.getmessage() ) );
                            }
                        }
                    }
                    // new row. **this will always return multiple matches
                    csv = csv + '\n';
                } else if (matchFound == true){
                    //We have already found a match, and this is the next row after that that doesn't match. 
                    //Since we know this set is sorted by the query field, we can break here 
                    //because everything after this won't match
                    break;
                }
            }
            // if we didn't find a match for this record, then just output the original row
            if(matchFound == false){
                csv = csv + csvfilelines[i].replaceAll('\\n','').replaceAll('\\r','') + ',';
                csv = csv + 'No Match with ' + csvRecordData[searchTokenIndex];
                if (fieldsInOutput.size() > 0){
                    for(Integer k = 0; k < fieldsInOutput.size(); k++){
                        csv = csv + ',';
                    }
                }
                csv = csv + '\n';
            } 
            // Loop through oppsToDrop and remove those so we don't review those records again. This saves on CPU time. 
            for(Integer l = oppsToDrop.size() - 1; l > -1 ; l--){
                opps.remove(oppsToDrop[l]);
            }
        }
        // Save a copy of the plaintext csv string for test classes or what have you
        csvBeforeConvert = csv;
        // encode CSV for output
        csv = EncodingUtil.base64Encode(Blob.valueOf(csv));
    }
    
    // After the user selects an object, this method pulls in the list of fields. 
    public void fetchFields(){
        listOfFields = new List<SelectOption>();
        MapOfFields = gd.get(selectedObject).getDescribe().fields.getMap();
        for(Schema.SObjectField field : MapOfFields.values()){
            Schema.DescribeFieldResult fr = field.getDescribe();
            listOfFields.add( new SelectOption(String.valueof(fr.getName()), String.valueof(fr.getLabel())));
        } 
        listOfFields = sortSelectOptionsByLabel(listOfFields);
    }
    
    // This method is included to sort the <select> lists of objects and field names, which come sorted in a non-intuitive way that can be hard to navigate.
    public List<SelectOption> sortSelectOptionsByLabel(List<SelectOption> sortingList) {
        for (Integer i =0; i < sortingList.size(); i++) {
            for (Integer j = i; j > 0; j--) {
                if (sortingList[j-1].getLabel() > sortingList[j].getLabel()){
                    SelectOption temp = sortingList[j];
                    sortingList[j] = sortingList[j-1];
                    sortingList[j-1] = temp;
                }
            }
        }
    	return sortingList;
    }
}
